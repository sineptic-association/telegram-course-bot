name: Rust

on:
  push:
  pull_request:

env:
  CARGO_TERM_COLOR: always

jobs:
  check:
    runs-on: blacksmith-4vcpu-ubuntu-2404
    steps:
      - uses: actions/checkout@v4
      - name: Use nightly version
        run: rustup override set nightly
          && rustup component add --toolchain nightly-x86_64-unknown-linux-gnu rustfmt clippy
      - uses: useblacksmith/rust-cache@v3
      - name: Check formatting
        run: cargo fmt --check
      - name: Linter
        run: cargo clippy -- -Dwarnings

  build:
    runs-on: blacksmith-4vcpu-ubuntu-2404
    needs: check
    outputs:
      executable_id: ${{ steps.upload_executable.outputs.artifact-id }}
      assets_id: ${{ steps.upload_assets.outputs.artifact-id }}
    steps:
      - uses: actions/checkout@v4
      - name: Use nightly version
        run: rustup override set nightly
      - uses: useblacksmith/rust-cache@v3
      - name: Build
        run: cargo build --release
      - name: Upload build artifact
        id: upload_executable
        uses: actions/upload-artifact@v4.6.1
        with:
          name: linux-x86_64
          path: target/release/telegram-bot
      - name: Upload assets
        id: upload_assets
        uses: actions/upload-artifact@v4.6.1
        with:
          name: assets
          path: |
            cards.md
            graph

      - name: Output artifact IDs
        run: |
          echo 'Build artifact ID is ${{ steps.upload_executable.outputs.artifact-id }}'
          echo 'Assets artifact ID is ${{ steps.upload_tasks.outputs.artifact-id }}'

  deploy:
    runs-on: ubuntu-latest
    needs: build
    if: ${{ github.event_name == 'push' && github.ref == 'refs/heads/main' }}
    steps:
      - env:
          EXECUTABLE_ID: ${{needs.build.outputs.executable_id}}
          TASKS_ID: ${{needs.build.outputs.assets_id}}
        run: |
          echo "Build artifact ID is $EXECUTABLE_ID"
          echo "Assets artifact ID is $TASKS_ID"
